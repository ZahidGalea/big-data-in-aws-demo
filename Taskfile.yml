version: "3"

vars:
  TFPLAN: .tfplan

# With AWS Credentials
dotenv: [ '.env' ]

tasks:
  tests:
    preconditions:
      - test -f .env
      - test -n $AWS_SECRET_ACCESS_KEY
      - test -n $AWS_ACCESS_KEY_ID
  
  infrastructure:init:
    deps: [ tests ]
    dir: infrastructure/aws-bigdata-demo
    desc: Init terraform
    cmds:
      - terraform init

  infrastructure:plan:
    deps: [ infrastructure:init, tests ]
    dir: infrastructure/aws-bigdata-demo
    desc: Show terraform resources creation
    cmds:
      - terraform plan -out={{.TFPLAN}}

  infrastructure:apply:
    deps: [ infrastructure:plan, tests ]
    dir: infrastructure/aws-bigdata-demo
    desc: Apply resources creation
    cmds:
      - terraform apply "{{.TFPLAN}}"
  
  application:cdc-app-as-submodule-update:
    desc: Downloads the repository
    cmds:
      - git submodule update
  
  application:init-minikube:
    deps: [ tests ]
    dir: application-folder
    desc: Inits minikube
    cmds:
      - minikube delete
      - minikube start --memory 11000 --cpus 6  --insecure-registry "10.0.0.0/24"
      - minikube addons enable registry
  
  application:generate-app:
    deps: [ tests, application:cdc-app-as-submodule-update ]
    dir: application-folder
    desc: Creates the application in minikube
    vars:
      MNK_REGISTRY_IP:
        sh: kubectl -n kube-system get svc registry -o jsonpath='{.spec.clusterIP}'
    cmds:
      - kubectl create ns debezium-example
      - kubectl config set-context --current --namespace=debezium-example
      - kubectl create configmap filler-app-db-creation --from-file=database/startup-scripts/db.creation.sh
      - kubectl apply -f database/db.yml
      - eval $(minikube docker-env); docker build -t=logistic-app:latest filler-application/
      - eval $(minikube docker-env); docker build -t=simulation-logistic-app:latest filler-application/simulation_app/
      - kubectl apply -f secrets/
      - kubectl apply -f filler-application/filler-application.yml
      - kubectl apply -f filler-application/transaction-simulation.yml
      - curl -sL https://github.com/operator-framework/operator-lifecycle-manager/releases/download/v0.20.0/install.sh | bash -s v0.20.0
      - kubectl create -f https://operatorhub.io/install/strimzi-kafka-operator.yaml
      - kubectl create -n debezium-example -f roles/connector-configuration-role.yml
      - kubectl create -n debezium-example -f roles/connector-configuration-role-binding.yml
      - sleep 60
      - kubectl create -n debezium-example -f kafka/kafka.yml
      - export MNK_REGISTRY_IP={{.MNK_REGISTRY_IP}}; envsubst < kafka/kafka-connect.yml | kubectl apply -f -
      - kubectl apply -f kafka/dbz-connector.yml
  